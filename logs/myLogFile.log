3/3/24, 8:57 PM	UserController	Req User findAll()	::ffff:127.0.0.1
3/3/24, 9:00 PM	UserController	Req User findAll()	::ffff:127.0.0.1
3/3/24, 9:01 PM	AllExceptionsFilter	[object Object]
3/3/24, 9:01 PM	UserController	Req User findAll()	::ffff:127.0.0.1
3/3/24, 9:02 PM	AllExceptionsFilter	[object Object]
3/3/24, 9:02 PM	AllExceptionsFilter	[object Object]
3/3/24, 9:02 PM	AllExceptionsFilter	[object Object]
3/3/24, 9:03 PM	AllExceptionsFilter	Internal Server Error
3/3/24, 9:04 PM	AllExceptionsFilter	Internal Server Error
3/3/24, 9:04 PM	UserController	Req User findAll()	::ffff:127.0.0.1
3/3/24, 9:11 PM	UserController	Req User findAll()	::ffff:127.0.0.1
3/3/24, 9:16 PM	AllExceptionsFilter	Invalid `this.databaseService.user.update()` invocation in/Users/vaidas/Documents/lesson01/src/user/user.service.ts:32:38  29 }  30   31 async update(id: number, updateUserDto: Prisma.UserUpdateInput) {→ 32   return this.databaseService.user.update({         where: {           id: 5         },         data: {           walletAddress: "2398474598",           walletNames: [             undefined             ~~~~~~~~~           ]         }       })Invalid value for argument `walletNames[0]`: Can not use `undefined` value within array. Use `null` or filter out `undefined` values.
3/3/24, 9:17 PM	UserController	Req User findAll()	::ffff:127.0.0.1
3/3/24, 9:18 PM	UserController	Req User findAll()	::ffff:127.0.0.1
3/3/24, 9:19 PM	UserController	Req User findAll()	::ffff:127.0.0.1
3/3/24, 9:20 PM	UserController	Req User findAll()	::ffff:127.0.0.1
3/3/24, 9:21 PM	AllExceptionsFilter	[object Object]
3/3/24, 9:21 PM	UserController	Req User findAll()	::ffff:127.0.0.1
3/3/24, 9:21 PM	UserController	Req User findAll()	::ffff:127.0.0.1
3/3/24, 9:22 PM	UserController	Req User findAll()	::ffff:127.0.0.1
3/4/24, 12:12 PM	ItemController	Req User findAll()	::ffff:127.0.0.1
3/4/24, 12:17 PM	UserController	Req User findAll()	::ffff:127.0.0.1
3/4/24, 12:22 PM	AllExceptionsFilter	Invalid `this.databaseService.user.update()` invocation in/Users/vaidas/Documents/crypto-shop-backend/src/user/user.service.ts:29:38  26 }  27   28 async update(id: number, updateUserDto: Prisma.UserUpdateInput) {→ 29   return this.databaseService.user.update({         where: {           id: 7         },         data: {           items: [             {               title: "Used headphones",               description: "Razer Oxyn 2.0, devetos, itrukes laidas, veikiancios.",               price: 70,               currency: "BTC",               sellerId: 7             }           ]           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~         }       })Argument `items`: Invalid value provided. Expected ItemUpdateManyWithoutSellerNestedInput or ItemUncheckedUpdateManyWithoutSellerNestedInput, provided (Object).
3/4/24, 12:27 PM	AllExceptionsFilter	Invalid `this.databaseService.user.update()` invocation in/Users/vaidas/Documents/crypto-shop-backend/src/user/user.service.ts:29:38  26 }  27   28 async update(id: number, updateUserDto: Prisma.UserUpdateInput) {→ 29   return this.databaseService.user.update({         where: {           id: 7         },         data: {           items: [             {               title: "Used headphones",               description: "Razer Oxyn 2.0, devetos, itrukes laidas, veikiancios.",               price: 70,               currency: "BTC",               sellerId: 7,               seller: {                 id: 7,                 walletAddress: "0909095656",                 walletNames: [                   {                     metaTag: "adsf987sdf7sdf"                   }                 ],                 email: null               }             }           ]           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~         }       })Argument `items`: Invalid value provided. Expected ItemUpdateManyWithoutSellerNestedInput or ItemUncheckedUpdateManyWithoutSellerNestedInput, provided (Object).
3/4/24, 1:05 PM	AllExceptionsFilter	Invalid `this.databaseService.user.update()` invocation in/Users/vaidas/Documents/crypto-shop-backend/src/user/user.service.ts:31:38  28 async update(id: number, updateUserDto: Prisma.UserUpdateInput) {  29   const itemsData = updateUserDto?.items;  30 → 31   return this.databaseService.user.update({         where: {           id: 7         },         data: {           items: [             {               title: "Used headphones",               description: "Razer Oxyn 2.0, devetos, itrukes laidas, veikiancios.",               price: 70,               currency: "BTC",               sellerId: 7,               seller: {                 id: 7,                 walletAddress: "0909095656",                 walletNames: [                   {                     metaTag: "adsf987sdf7sdf"                   }                 ],                 email: null               }             },             {               title: "Used headphones",               description: "Razer Oxyn 2.0, devetos, itrukes laidas, veikiancios.",               price: 20,               currency: "ETH",               sellerId: 7,               seller: {                 id: 7,                 walletAddress: "0909095656",                 walletNames: [                   {                     metaTag: "adsf987sdf7sdf"                   }                 ],                 email: null               }             }           ]           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~         }       })Argument `items`: Invalid value provided. Expected ItemUpdateManyWithoutSellerNestedInput or ItemUncheckedUpdateManyWithoutSellerNestedInput, provided (Object, Object).
3/4/24, 1:08 PM	AllExceptionsFilter	Invalid `this.databaseService.user.update()` invocation in/Users/vaidas/Documents/crypto-shop-backend/src/user/user.service.ts:31:38  28 async update(id: number, updateUserDto: Prisma.UserUpdateInput) {  29   const itemsData = updateUserDto?.items;  30 → 31   return this.databaseService.user.update({         where: {           id: 7         },         data: {           items: [             {               title: "Used headphones",               description: "Razer Oxyn 2.0, devetos, itrukes laidas, veikiancios.",               price: 70,               currency: "BTC",               sellerId: 7             },             {               title: "Used headphones",               description: "Razer Oxyn 2.0, devetos, itrukes laidas, veikiancios.",               price: 20,               currency: "ETH",               sellerId: 7             }           ]           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~         }       })Argument `items`: Invalid value provided. Expected ItemUpdateManyWithoutSellerNestedInput or ItemUncheckedUpdateManyWithoutSellerNestedInput, provided (Object, Object).
3/4/24, 1:48 PM	AllExceptionsFilter	Invalid `this.databaseService.user.update()` invocation in/Users/vaidas/Documents/crypto-shop-backend/src/user/user.service.ts:31:38  28 async update(id: number, updateUserDto: Prisma.UserUpdateInput) {  29   const itemsData = updateUserDto?.items;  30 → 31   return this.databaseService.user.update({         where: {           id: 7         },         data: {           items: [             {               title: "Used headphones",               description: "Razer Oxyn 2.0, devetos, itrukes laidas, veikiancios.",               price: 70,               currency: "BTC"             },             {               title: "Used headphones",               description: "Razer Oxyn 2.0, devetos, itrukes laidas, veikiancios.",               price: 20,               currency: "ETH"             }           ]           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~         }       })Argument `items`: Invalid value provided. Expected ItemUpdateManyWithoutSellerNestedInput or ItemUncheckedUpdateManyWithoutSellerNestedInput, provided (Object, Object).
3/4/24, 2:07 PM	ItemController	Req User findAll()	::ffff:127.0.0.1
3/4/24, 2:08 PM	AllExceptionsFilter	Invalid `this.databaseService.item.create()` invocation in/Users/vaidas/Documents/crypto-shop-backend/src/item/item.service.ts:10:38   7 constructor(private readonly databaseService: DatabaseService) {}   8    9 async create(createItemDto: Prisma.ItemCreateInput) {→ 10   return this.databaseService.item.create({         data: [           {             title: "Used headphones",             description: "Razer Oxyn 2.0, devetos, itrukes laidas, veikiancios.",             price: 70,             currency: "BTC",             sellerId: 1           },           {             title: "Mac Intel7",             description: "Macas naudotas, bet dar veikia.",             price: 20,             currency: "ETH",             sellerId: 1           }         ]         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~       })Argument `data`: Invalid value provided. Expected ItemCreateInput or ItemUncheckedCreateInput, provided (Object, Object).
3/4/24, 2:09 PM	AllExceptionsFilter	Invalid `this.databaseService.item.create()` invocation in/Users/vaidas/Documents/crypto-shop-backend/src/item/item.service.ts:10:38   7 constructor(private readonly databaseService: DatabaseService) {}   8    9 async create(createItemDto: Prisma.ItemCreateInput) {→ 10   return this.databaseService.item.create({         data: [           {             title: "Used headphones",             description: "Razer Oxyn 2.0, devetos, itrukes laidas, veikiancios.",             price: 70,             currency: "BTC"           },           {             title: "Mac Intel7",             description: "Macas naudotas, bet dar veikia.",             price: 20,             currency: "ETH"           }         ]         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~       })Argument `data`: Invalid value provided. Expected ItemCreateInput or ItemUncheckedCreateInput, provided (Object, Object).
3/4/24, 2:10 PM	AllExceptionsFilter	Invalid `this.databaseService.user.update()` invocation in/Users/vaidas/Documents/crypto-shop-backend/src/user/user.service.ts:28:38  25 }  26   27 async update(id: number, updateUserDto: Prisma.UserUpdateInput) {→ 28   return this.databaseService.user.update({         where: {           id: 1         },         data: {           items: [             {               title: "Used headphones",               description: "Razer Oxyn 2.0, devetos, itrukes laidas, veikiancios.",               price: 70,               currency: "BTC"             },             {               title: "Used headphones",               description: "Razer Oxyn 2.0, devetos, itrukes laidas, veikiancios.",               price: 20,               currency: "ETH"             }           ]           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~         }       })Argument `items`: Invalid value provided. Expected ItemUpdateManyWithoutSellerNestedInput or ItemUncheckedUpdateManyWithoutSellerNestedInput, provided (Object, Object).
3/4/24, 2:11 PM	AllExceptionsFilter	Invalid `this.databaseService.user.update()` invocation in/Users/vaidas/Documents/crypto-shop-backend/src/user/user.service.ts:28:38  25 }  26   27 async update(id: number, updateUserDto: Prisma.UserUpdateInput) {→ 28   return this.databaseService.user.update({         where: {           id: 1         },         data: {           items: [             {               title: "Used headphones",               description: "Razer Oxyn 2.0, devetos, itrukes laidas, veikiancios.",               price: 70,               currency: "BTC"             }           ]           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~         }       })Argument `items`: Invalid value provided. Expected ItemUpdateManyWithoutSellerNestedInput or ItemUncheckedUpdateManyWithoutSellerNestedInput, provided (Object).
3/4/24, 2:11 PM	AllExceptionsFilter	Invalid `this.databaseService.user.update()` invocation in/Users/vaidas/Documents/crypto-shop-backend/src/user/user.service.ts:28:38  25 }  26   27 async update(id: number, updateUserDto: Prisma.UserUpdateInput) {→ 28   return this.databaseService.user.update({         where: {           id: 1         },         data: {           items: [             {               title: "Used headphones"             }           ]           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~         }       })Argument `items`: Invalid value provided. Expected ItemUpdateManyWithoutSellerNestedInput or ItemUncheckedUpdateManyWithoutSellerNestedInput, provided (Object).
3/4/24, 2:23 PM	TransactionController	Req User findAll()	::ffff:127.0.0.1
3/4/24, 2:24 PM	TransactionController	Req User findAll()	::ffff:127.0.0.1
3/4/24, 2:28 PM	MessageController	Req User findAll()	::ffff:127.0.0.1
3/4/24, 2:28 PM	AllExceptionsFilter	Invalid `this.databaseService.user.update()` invocation in/Users/vaidas/Documents/crypto-shop-backend/src/user/user.service.ts:28:38  25 }  26   27 async update(id: number, updateUserDto: Prisma.UserUpdateInput) {→ 28   return this.databaseService.user.update({         where: {           id: 1         },         data: {           items: [             {               title: "Used headphones"             }           ]           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~         }       })Argument `items`: Invalid value provided. Expected ItemUpdateManyWithoutSellerNestedInput or ItemUncheckedUpdateManyWithoutSellerNestedInput, provided (Object).
3/4/24, 2:28 PM	AllExceptionsFilter	[object Object]
3/4/24, 2:29 PM	AllExceptionsFilter	Invalid `this.databaseService.user.update()` invocation in/Users/vaidas/Documents/crypto-shop-backend/src/user/user.service.ts:28:38  25 }  26   27 async update(id: number, updateUserDto: Prisma.UserUpdateInput) {→ 28   return this.databaseService.user.update({         where: {           id: 1         },         data: {           items: [             {               title: "Used headphones"             }           ]           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~         }       })Argument `items`: Invalid value provided. Expected ItemUpdateManyWithoutSellerNestedInput or ItemUncheckedUpdateManyWithoutSellerNestedInput, provided (Object).
3/4/24, 2:30 PM	AllExceptionsFilter	Invalid `this.databaseService.user.update()` invocation in/Users/vaidas/Documents/crypto-shop-backend/src/user/user.service.ts:28:38  25 }  26   27 async update(id: number, updateUserDto: Prisma.UserUpdateInput) {→ 28   return this.databaseService.user.update({         where: {           id: 1         },         data: {           items: [             {               title: "Used headphones",               images: [                 {                   url: "www.ggogle.com"                 }               ]             }           ]           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~         }       })Argument `items`: Invalid value provided. Expected ItemUpdateManyWithoutSellerNestedInput or ItemUncheckedUpdateManyWithoutSellerNestedInput, provided (Object).
3/4/24, 2:30 PM	UserController	Req User findAll()	::ffff:127.0.0.1
3/4/24, 2:31 PM	AllExceptionsFilter	Invalid `this.databaseService.user.create()` invocation in/Users/vaidas/Documents/crypto-shop-backend/src/user/user.service.ts:10:38   7 constructor(private readonly databaseService: DatabaseService) {}   8    9 async create(createUserDto: Prisma.UserCreateInput) {→ 10   return this.databaseService.user.create({         data: {           walletAddress: "0909095656",           walletNames: [             {               metaTag: "adsf987sdf7sdf"             }           ],           email: null,           items: [             {               title: "Used headphones",               images: [                 {                   url: "www.ggogle.com"                 }               ]             }           ]           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~         }       })Argument `items`: Invalid value provided. Expected ItemCreateNestedManyWithoutSellerInput or ItemUncheckedCreateNestedManyWithoutSellerInput, provided (Object).
3/4/24, 2:31 PM	AllExceptionsFilter	Invalid `this.databaseService.user.create()` invocation in/Users/vaidas/Documents/crypto-shop-backend/src/user/user.service.ts:10:38   7 constructor(private readonly databaseService: DatabaseService) {}   8    9 async create(createUserDto: Prisma.UserCreateInput) {→ 10   return this.databaseService.user.create({         data: {           walletAddress: "0909095656",           walletNames: [             {               metaTag: "adsf987sdf7sdf"             }           ],           email: null,           items: {             title: "Used headphones",             ~~~~~             images: [               {                 url: "www.ggogle.com"               }             ],       ?     create?: ItemCreateWithoutSellerInput | ItemCreateWithoutSellerInput[] | ItemUncheckedCreateWithoutSellerInput | ItemUncheckedCreateWithoutSellerInput[],       ?     connectOrCreate?: ItemCreateOrConnectWithoutSellerInput | ItemCreateOrConnectWithoutSellerInput[],       ?     createMany?: ItemCreateManySellerInputEnvelope,       ?     connect?: ItemWhereUniqueInput | ItemWhereUniqueInput[]           }         }       })Unknown argument `title`. Available options are marked with ?.
3/4/24, 2:32 PM	AllExceptionsFilter	Invalid `this.databaseService.user.create()` invocation in/Users/vaidas/Documents/crypto-shop-backend/src/user/user.service.ts:10:38   7 constructor(private readonly databaseService: DatabaseService) {}   8    9 async create(createUserDto: Prisma.UserCreateInput) {→ 10   return this.databaseService.user.create({         data: {           walletAddress: "0909095656",           walletNames: [             {               metaTag: "adsf987sdf7sdf"             }           ],           email: null,           items: [             {               title: "Used headphones",               images: [                 {                   url: "www.ggogle.com"                 }               ]             }           ]           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~         }       })Argument `items`: Invalid value provided. Expected ItemCreateNestedManyWithoutSellerInput or ItemUncheckedCreateNestedManyWithoutSellerInput, provided (Object).
3/4/24, 3:17 PM	MessageController	Req User findAll()	::ffff:127.0.0.1
3/4/24, 3:18 PM	AllExceptionsFilter	Invalid `this.databaseService.user.create()` invocation in/Users/vaidas/Documents/crypto-shop-backend/src/user/user.service.ts:10:38   7 constructor(private readonly databaseService: DatabaseService) {}   8    9 async create(createUserDto: Prisma.UserCreateInput) {→ 10   return this.databaseService.user.create({         data: {           content: "yes please",           fromId: 7,           toId: 1,       +   walletAddress: String         }       })Argument `walletAddress` is missing.
3/4/24, 3:18 PM	UserController	Req User findAll()	::ffff:127.0.0.1
3/4/24, 3:24 PM	ItemController	Req User findAll()	::ffff:127.0.0.1
3/4/24, 3:25 PM	AllExceptionsFilter	Invalid `this.databaseService.item.create()` invocation in/Users/vaidas/Documents/crypto-shop-backend/src/item/item.service.ts:10:38   7 constructor(private readonly databaseService: DatabaseService) {}   8    9 async create(createItemDto: Prisma.ItemCreateInput) {→ 10   return this.databaseService.item.create({         data: {           title: "headphones",           description: "naudotos",           price: 1,           currency: "BTC",       +   images: JsonNullValueInput | Json         }       })Argument `images` is missing.
3/4/24, 3:26 PM	AllExceptionsFilter	Invalid `this.databaseService.item.create()` invocation in/Users/vaidas/Documents/crypto-shop-backend/src/item/item.service.ts:10:38   7 constructor(private readonly databaseService: DatabaseService) {}   8    9 async create(createItemDto: Prisma.ItemCreateInput) {→ 10   return this.databaseService.item.create({         data: {           title: "headphones",           description: "naudotos",           price: 1,           currency: "BTC",           images: {             url: "www.abc.com"           },       +   seller: {       +     create: UserCreateWithoutItemsInput | UserUncheckedCreateWithoutItemsInput,       +     connectOrCreate: UserCreateOrConnectWithoutItemsInput,       +     connect: UserWhereUniqueInput       +   }         }       })Argument `seller` is missing.
3/4/24, 3:26 PM	AllExceptionsFilter	Invalid `this.databaseService.item.create()` invocation in/Users/vaidas/Documents/crypto-shop-backend/src/item/item.service.ts:10:38   7 constructor(private readonly databaseService: DatabaseService) {}   8    9 async create(createItemDto: Prisma.ItemCreateInput) {→ 10   return this.databaseService.item.create({         data: {           title: "headphones",           description: "naudotos",           price: 1,           currency: "BTC",           images: {             url: "www.abc.com"           },           seller: 1                   ~         }       })Argument `seller`: Invalid value provided. Expected UserCreateNestedOneWithoutItemsInput, provided Int.
3/4/24, 3:26 PM	AllExceptionsFilter	[object Object]
3/4/24, 3:27 PM	AllExceptionsFilter	[object Object]
3/4/24, 3:27 PM	UserController	Req User findAll()	::ffff:127.0.0.1
3/4/24, 3:27 PM	AllExceptionsFilter	Invalid `this.databaseService.item.create()` invocation in/Users/vaidas/Documents/crypto-shop-backend/src/item/item.service.ts:10:38   7 constructor(private readonly databaseService: DatabaseService) {}   8    9 async create(createItemDto: Prisma.ItemCreateInput) {→ 10   return this.databaseService.item.create({         data: {           title: "headphones",           description: "naudotos",           price: 1,           currency: "BTC",           images: {             url: "www.abc.com"           },           seller: {             id: 1,             ~~       ?     create?: UserCreateWithoutItemsInput | UserUncheckedCreateWithoutItemsInput,       ?     connectOrCreate?: UserCreateOrConnectWithoutItemsInput,       ?     connect?: UserWhereUniqueInput           }         }       })Unknown argument `id`. Available options are marked with ?.
3/4/24, 3:28 PM	AllExceptionsFilter	Invalid `this.databaseService.item.create()` invocation in/Users/vaidas/Documents/crypto-shop-backend/src/item/item.service.ts:10:38   7 constructor(private readonly databaseService: DatabaseService) {}   8    9 async create(createItemDto: Prisma.ItemCreateInput) {→ 10   return this.databaseService.item.create({         data: {           title: "headphones",           description: "naudotos",           price: 1,           currency: "BTC",           images: {             url: "www.abc.com"           },           seller: {             id: 1,             ~~             walletAddress: "123123123",             walletNames: [               {                 Binance: "555777666",                 MetaMask: "321321321"               }             ],             email: "anonymous@gmail.com",       ?     create?: UserCreateWithoutItemsInput | UserUncheckedCreateWithoutItemsInput,       ?     connectOrCreate?: UserCreateOrConnectWithoutItemsInput,       ?     connect?: UserWhereUniqueInput           }         }       })Unknown argument `id`. Available options are marked with ?.
3/4/24, 3:28 PM	AllExceptionsFilter	Invalid `this.databaseService.item.create()` invocation in/Users/vaidas/Documents/crypto-shop-backend/src/item/item.service.ts:10:38   7 constructor(private readonly databaseService: DatabaseService) {}   8    9 async create(createItemDto: Prisma.ItemCreateInput) {→ 10   return this.databaseService.item.create({         data: {           title: "headphones",           description: "naudotos",           price: 1,           currency: "BTC",           images: {             url: "www.abc.com"           },           seller: {             walletAddress: "123123123",             ~~~~~~~~~~~~~             walletNames: [               {                 Binance: "555777666",                 MetaMask: "321321321"               }             ],             email: "anonymous@gmail.com",       ?     create?: UserCreateWithoutItemsInput | UserUncheckedCreateWithoutItemsInput,       ?     connectOrCreate?: UserCreateOrConnectWithoutItemsInput,       ?     connect?: UserWhereUniqueInput           }         }       })Unknown argument `walletAddress`. Available options are marked with ?.
3/4/24, 3:28 PM	AllExceptionsFilter	Invalid `this.databaseService.item.create()` invocation in/Users/vaidas/Documents/crypto-shop-backend/src/item/item.service.ts:10:38   7 constructor(private readonly databaseService: DatabaseService) {}   8    9 async create(createItemDto: Prisma.ItemCreateInput) {→ 10   return this.databaseService.item.create({         data: {           title: "headphones",           description: "naudotos",           price: 1,           currency: "BTC",           images: {             url: "www.abc.com"           },           sellerId: 1,           ~~~~~~~~           seller: {             id: 1,             walletAddress: "123123123",             walletNames: [               {                 Binance: "555777666",                 MetaMask: "321321321"               }             ],             email: "anonymous@gmail.com"           },       ?   createdAt?: DateTime,       ?   updatedAt?: DateTime,       ?   transactions?: TransactionCreateNestedManyWithoutItemInput         }       })Unknown argument `sellerId`. Did you mean `seller`? Available options are marked with ?.
3/4/24, 3:29 PM	AllExceptionsFilter	Invalid `this.databaseService.item.create()` invocation in/Users/vaidas/Documents/crypto-shop-backend/src/item/item.service.ts:10:38   7 constructor(private readonly databaseService: DatabaseService) {}   8    9 async create(createItemDto: Prisma.ItemCreateInput) {→ 10   return this.databaseService.item.create({         data: {           title: "headphones",           description: "naudotos",           price: 1,           currency: "BTC",           images: {             url: "www.abc.com"           },           seller: {             id: 1,             ~~             walletAddress: "123123123",             walletNames: [               {                 Binance: "555777666",                 MetaMask: "321321321"               }             ],             email: "anonymous@gmail.com",       ?     create?: UserCreateWithoutItemsInput | UserUncheckedCreateWithoutItemsInput,       ?     connectOrCreate?: UserCreateOrConnectWithoutItemsInput,       ?     connect?: UserWhereUniqueInput           }         }       })Unknown argument `id`. Available options are marked with ?.
3/4/24, 3:30 PM	AllExceptionsFilter	Internal Server Error
3/4/24, 3:30 PM	AllExceptionsFilter	Invalid `this.databaseService.item.create()` invocation in/Users/vaidas/Documents/crypto-shop-backend/src/item/item.service.ts:10:38   7 constructor(private readonly databaseService: DatabaseService) {}   8    9 async create(createItemDto: Prisma.ItemCreateInput) {→ 10   return this.databaseService.item.create({         data: {           title: "headphones",           description: "naudotos",           price: 1,           currency: "BTC",           images: {             url: "www.abc.com"           },           seller: {},           sellerId: 1,           ~~~~~~~~       ?   createdAt?: DateTime,       ?   updatedAt?: DateTime,       ?   transactions?: TransactionCreateNestedManyWithoutItemInput         }       })Unknown argument `sellerId`. Did you mean `seller`? Available options are marked with ?.
3/4/24, 3:30 PM	AllExceptionsFilter	[object Object]
3/4/24, 3:30 PM	AllExceptionsFilter	Internal Server Error
3/4/24, 3:31 PM	AllExceptionsFilter	Invalid `this.databaseService.item.create()` invocation in/Users/vaidas/Documents/crypto-shop-backend/src/item/item.service.ts:10:38   7 constructor(private readonly databaseService: DatabaseService) {}   8    9 async create(createItemDto: Prisma.ItemCreateInput) {→ 10   return this.databaseService.item.create({         data: {           title: "headphones",           description: "naudotos",           price: 1,           currency: "BTC",           images: {             url: "www.abc.com"           },           seller: {             id: 1,             ~~             walletAddress: "123123123",             walletNames: [               {                 Binance: "555777666",                 MetaMask: "321321321"               }             ],             email: "anonymous@gmail.com",       ?     create?: UserCreateWithoutItemsInput | UserUncheckedCreateWithoutItemsInput,       ?     connectOrCreate?: UserCreateOrConnectWithoutItemsInput,       ?     connect?: UserWhereUniqueInput           }         }       })Unknown argument `id`. Available options are marked with ?.
3/4/24, 3:31 PM	AllExceptionsFilter	Invalid `this.databaseService.item.create()` invocation in/Users/vaidas/Documents/crypto-shop-backend/src/item/item.service.ts:10:38   7 constructor(private readonly databaseService: DatabaseService) {}   8    9 async create(createItemDto: Prisma.ItemCreateInput) {→ 10   return this.databaseService.item.create({         data: {           title: "headphones",           description: "naudotos",           price: 1,           currency: "BTC",           images: {             url: "www.abc.com"           },           seller: {             walletAddress: "123123123",             ~~~~~~~~~~~~~             walletNames: [               {                 Binance: "555777666",                 MetaMask: "321321321"               }             ],             email: "anonymous@gmail.com",       ?     create?: UserCreateWithoutItemsInput | UserUncheckedCreateWithoutItemsInput,       ?     connectOrCreate?: UserCreateOrConnectWithoutItemsInput,       ?     connect?: UserWhereUniqueInput           }         }       })Unknown argument `walletAddress`. Available options are marked with ?.
3/4/24, 3:31 PM	AllExceptionsFilter	Invalid `this.databaseService.item.create()` invocation in/Users/vaidas/Documents/crypto-shop-backend/src/item/item.service.ts:10:38   7 constructor(private readonly databaseService: DatabaseService) {}   8    9 async create(createItemDto: Prisma.ItemCreateInput) {→ 10   return this.databaseService.item.create({         data: {           title: "headphones",           description: "naudotos",           price: 1,           currency: "BTC",           images: {             url: "www.abc.com"           },           seller: {             walletNames: [             ~~~~~~~~~~~               {                 Binance: "555777666",                 MetaMask: "321321321"               }             ],             email: "anonymous@gmail.com",       ?     create?: UserCreateWithoutItemsInput | UserUncheckedCreateWithoutItemsInput,       ?     connectOrCreate?: UserCreateOrConnectWithoutItemsInput,       ?     connect?: UserWhereUniqueInput           }         }       })Unknown argument `walletNames`. Available options are marked with ?.
3/4/24, 3:32 PM	AllExceptionsFilter	Invalid `this.databaseService.item.create()` invocation in/Users/vaidas/Documents/crypto-shop-backend/src/item/item.service.ts:10:38   7 constructor(private readonly databaseService: DatabaseService) {}   8    9 async create(createItemDto: Prisma.ItemCreateInput) {→ 10   return this.databaseService.item.create({         data: {           title: "headphones",           description: "naudotos",           price: 1,           currency: "BTC",           images: {             url: "www.abc.com"           },           seller: {             email: "anonymous@gmail.com",             ~~~~~       ?     create?: UserCreateWithoutItemsInput | UserUncheckedCreateWithoutItemsInput,       ?     connectOrCreate?: UserCreateOrConnectWithoutItemsInput,       ?     connect?: UserWhereUniqueInput           }         }       })Unknown argument `email`. Available options are marked with ?.
3/4/24, 3:32 PM	AllExceptionsFilter	Invalid `this.databaseService.item.create()` invocation in/Users/vaidas/Documents/crypto-shop-backend/src/item/item.service.ts:10:38   7 constructor(private readonly databaseService: DatabaseService) {}   8    9 async create(createItemDto: Prisma.ItemCreateInput) {→ 10   return this.databaseService.item.create({         data: {           title: "headphones",           description: "naudotos",           price: 1,           currency: "BTC",           images: {             url: "www.abc.com"           },           seller: {             create: [               {                 id: 1,                 walletAddress: "123123123",                 walletNames: [                   {                     Binance: "555777666",                     MetaMask: "321321321"                   }                 ],                 email: "anonymous@gmail.com"               }             ]             ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~           }         }       })Argument `create`: Invalid value provided. Expected UserCreateWithoutItemsInput or UserUncheckedCreateWithoutItemsInput, provided (Object).
3/4/24, 3:33 PM	AllExceptionsFilter	Invalid `this.databaseService.item.create()` invocation in/Users/vaidas/Documents/crypto-shop-backend/src/item/item.service.ts:10:38   7 constructor(private readonly databaseService: DatabaseService) {}   8    9 async create(createItemDto: Prisma.ItemCreateInput) {→ 10   return this.databaseService.item.create({         data: {           title: "headphones",           description: "naudotos",           price: 1,           currency: "BTC",           images: {             url: "www.abc.com"           },           seller: {             create: [               {                 id: 1,                 walletAddress: "123123123",                 walletNames: [                   {                     Binance: "555777666",                     MetaMask: "321321321"                   }                 ],                 email: "anonymous@gmail.com"               }             ]             ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~           }         }       })Argument `create`: Invalid value provided. Expected UserCreateWithoutItemsInput or UserUncheckedCreateWithoutItemsInput, provided (Object).
3/4/24, 3:34 PM	AllExceptionsFilter	Invalid `this.databaseService.item.create()` invocation in/Users/vaidas/Documents/crypto-shop-backend/src/item/item.service.ts:10:38   7 constructor(private readonly databaseService: DatabaseService) {}   8    9 async create(createItemDto: Prisma.ItemCreateInput) {→ 10   return this.databaseService.item.create({         data: {           title: "headphones",           description: "naudotos",           price: 1,           currency: "BTC",           images: {             url: "www.abc.com"           },           seller: {             id: 1,             ~~             walletAddress: "123123123",             walletNames: [               {                 Binance: "555777666",                 MetaMask: "321321321"               }             ],             email: "anonymous@gmail.com",       ?     create?: UserCreateWithoutItemsInput | UserUncheckedCreateWithoutItemsInput,       ?     connectOrCreate?: UserCreateOrConnectWithoutItemsInput,       ?     connect?: UserWhereUniqueInput           }         }       })Unknown argument `id`. Available options are marked with ?.
3/4/24, 3:54 PM	AllExceptionsFilter	Invalid `this.databaseService.user.update()` invocation in/Users/vaidas/Documents/crypto-shop-backend/src/user/user.service.ts:28:38  25 }  26   27 async update(id: number, updateUserDto: Prisma.UserUpdateInput) {→ 28   return this.databaseService.user.update({         where: {           id: 1         },         data: {           title: "headphones",           ~~~~~           description: "naudotos",           price: 1,           currency: "BTC",           images: {             url: "www.abc.com"           },           seller: {             id: 1,             walletAddress: "123123123",             walletNames: [               {                 Binance: "555777666",                 MetaMask: "321321321"               }             ],             email: "anonymous@gmail.com"           },           items: {             create: [               {                 title: "",                 description: "",                 images: "",                 price: "",                 currency: ""               }             ]           },       ?   walletAddress?: String | StringFieldUpdateOperationsInput,       ?   walletNames?: JsonNullValueInput | Json,       ?   email?: String | NullableStringFieldUpdateOperationsInput | Null,       ?   createdAt?: DateTime | DateTimeFieldUpdateOperationsInput,       ?   updatedAt?: DateTime | DateTimeFieldUpdateOperationsInput,       ?   buyerTransactions?: TransactionUpdateManyWithoutBuyerNestedInput,       ?   sellerTransactions?: TransactionUpdateManyWithoutSellerNestedInput,       ?   messagesSent?: MessageUpdateManyWithoutFromNestedInput,       ?   messagesReceived?: MessageUpdateManyWithoutToNestedInput         }       })Unknown argument `title`. Available options are marked with ?.
3/4/24, 3:55 PM	AllExceptionsFilter	Invalid `this.databaseService.user.update()` invocation in/Users/vaidas/Documents/crypto-shop-backend/src/user/user.service.ts:28:38  25 }  26   27 async update(id: number, updateUserDto: Prisma.UserUpdateInput) {→ 28   return this.databaseService.user.update({         where: {           id: 1         },         data: {           items: {             create: [               {                 title: "",                 description: "",                 images: "",                 price: "",                 currency: ""               }             ]           }         }       })Invalid value for argument `price`: Failed to parse empty string. Expected decimal String.
3/4/24, 3:55 PM	AllExceptionsFilter	Invalid `this.databaseService.user.update()` invocation in/Users/vaidas/Documents/crypto-shop-backend/src/user/user.service.ts:28:38  25 }  26   27 async update(id: number, updateUserDto: Prisma.UserUpdateInput) {→ 28   return this.databaseService.user.update({         where: {           id: 1         },         data: {           items: {             create: [               {                 title: "",                 description: "",                 images: "",                 price: "",                 currency: ""               }             ]           }         }       })Invalid value for argument `price`: Failed to parse empty string. Expected decimal String.
3/4/24, 3:56 PM	AllExceptionsFilter	Invalid `this.databaseService.user.update()` invocation in/Users/vaidas/Documents/crypto-shop-backend/src/user/user.service.ts:28:38  25 }  26   27 async update(id: number, updateUserDto: Prisma.UserUpdateInput) {→ 28   return this.databaseService.user.update({         where: {           id: 1         },         data: {           items: {             create: [               {                 title: "",                 description: "",                 images: "",                 price: "",                 currency: ""               }             ]           }         }       })Invalid value for argument `price`: Failed to parse empty string. Expected decimal String.
3/4/24, 6:41 PM	AllExceptionsFilter	Invalid `this.databaseService.item.create()` invocation in/Users/vaidas/Documents/crypto-shop-backend/src/item/item.service.ts:10:38   7 constructor(private readonly databaseService: DatabaseService) {}   8    9 async create(createItemDto: Prisma.ItemCreateInput) {→ 10   return this.databaseService.item.create({         data: {           title: "headphones",           description: "naudotos",           price: 10,           currency: "BTC",           images: {             url: "www.abc.com"           },           seller: {             id: 1,             ~~             walletAddress: "123123123",             walletNames: [               {                 Binance: "555777666",                 MetaMask: "321321321"               }             ],             email: "anonymous@gmail.com",       ?     create?: UserCreateWithoutItemsInput | UserUncheckedCreateWithoutItemsInput,       ?     connectOrCreate?: UserCreateOrConnectWithoutItemsInput,       ?     connect?: UserWhereUniqueInput           }         }       })Unknown argument `id`. Available options are marked with ?.
3/4/24, 6:41 PM	AllExceptionsFilter	Invalid `this.databaseService.item.create()` invocation in/Users/vaidas/Documents/crypto-shop-backend/src/item/item.service.ts:10:38   7 constructor(private readonly databaseService: DatabaseService) {}   8    9 async create(createItemDto: Prisma.ItemCreateInput) {→ 10   return this.databaseService.item.create({         data: {           title: "headphones",           description: "naudotos",           price: 10,           currency: "BTC",           images: {             url: "www.abc.com"           },       +   seller: {       +     create: UserCreateWithoutItemsInput | UserUncheckedCreateWithoutItemsInput,       +     connectOrCreate: UserCreateOrConnectWithoutItemsInput,       +     connect: UserWhereUniqueInput       +   }         }       })Argument `seller` is missing.
3/4/24, 6:41 PM	AllExceptionsFilter	Invalid `this.databaseService.item.create()` invocation in/Users/vaidas/Documents/crypto-shop-backend/src/item/item.service.ts:10:38   7 constructor(private readonly databaseService: DatabaseService) {}   8    9 async create(createItemDto: Prisma.ItemCreateInput) {→ 10   return this.databaseService.item.create({         data: {           title: "headphones",           description: "naudotos",           price: 10,           currency: "BTC",           images: {             url: "www.abc.com"           },           seller: {             id: 1,             ~~             walletAddress: "123123123",             walletNames: [               {                 Binance: "555777666",                 MetaMask: "321321321"               }             ],             email: "anonymous@gmail.com",       ?     create?: UserCreateWithoutItemsInput | UserUncheckedCreateWithoutItemsInput,       ?     connectOrCreate?: UserCreateOrConnectWithoutItemsInput,       ?     connect?: UserWhereUniqueInput           }         }       })Unknown argument `id`. Available options are marked with ?.
3/4/24, 6:54 PM	AllExceptionsFilter	Invalid `this.databaseService.user.update()` invocation in/Users/vaidas/Documents/crypto-shop-backend/src/user/user.service.ts:28:38  25 }  26   27 async update(id: number, updateUserDto: Prisma.UserUpdateInput) {→ 28   return this.databaseService.user.update({         where: {           id: 1         },         data: {           items: {             title: "headphones",             ~~~~~             description: "naudotos",             price: 10,             currency: "BTC",             images: {               url: "www.abc.com"             },             sellerId: 1,       ?     create?: ItemCreateWithoutSellerInput | ItemCreateWithoutSellerInput[] | ItemUncheckedCreateWithoutSellerInput | ItemUncheckedCreateWithoutSellerInput[],       ?     connectOrCreate?: ItemCreateOrConnectWithoutSellerInput | ItemCreateOrConnectWithoutSellerInput[],       ?     upsert?: ItemUpsertWithWhereUniqueWithoutSellerInput | ItemUpsertWithWhereUniqueWithoutSellerInput[],       ?     createMany?: ItemCreateManySellerInputEnvelope,       ?     set?: ItemWhereUniqueInput | ItemWhereUniqueInput[],       ?     disconnect?: ItemWhereUniqueInput | ItemWhereUniqueInput[],       ?     delete?: ItemWhereUniqueInput | ItemWhereUniqueInput[],       ?     connect?: ItemWhereUniqueInput | ItemWhereUniqueInput[],       ?     update?: ItemUpdateWithWhereUniqueWithoutSellerInput | ItemUpdateWithWhereUniqueWithoutSellerInput[],       ?     updateMany?: ItemUpdateManyWithWhereWithoutSellerInput | ItemUpdateManyWithWhereWithoutSellerInput[],       ?     deleteMany?: ItemScalarWhereInput | ItemScalarWhereInput[]           }         }       })Unknown argument `title`. Available options are marked with ?.
3/4/24, 6:54 PM	AllExceptionsFilter	Invalid `this.databaseService.user.update()` invocation in/Users/vaidas/Documents/crypto-shop-backend/src/user/user.service.ts:28:38  25 }  26   27 async update(id: number, updateUserDto: Prisma.UserUpdateInput) {→ 28   return this.databaseService.user.update({         where: {           id: 1         },         data: {           items: [             {               title: "headphones",               description: "naudotos",               price: 10,               currency: "BTC",               images: {                 url: "www.abc.com"               },               sellerId: 1             }           ]           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~         }       })Argument `items`: Invalid value provided. Expected ItemUpdateManyWithoutSellerNestedInput or ItemUncheckedUpdateManyWithoutSellerNestedInput, provided (Object).
3/4/24, 6:54 PM	AllExceptionsFilter	Invalid `this.databaseService.user.update()` invocation in/Users/vaidas/Documents/crypto-shop-backend/src/user/user.service.ts:28:38  25 }  26   27 async update(id: number, updateUserDto: Prisma.UserUpdateInput) {→ 28   return this.databaseService.user.update({         where: {           id: 1         },         data: {           items: [             {               title: "headphones",               description: "naudotos",               price: 10,               currency: "BTC",               images: {                 url: "www.abc.com"               }             }           ]           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~         }       })Argument `items`: Invalid value provided. Expected ItemUpdateManyWithoutSellerNestedInput or ItemUncheckedUpdateManyWithoutSellerNestedInput, provided (Object).
3/4/24, 6:54 PM	AllExceptionsFilter	Invalid `this.databaseService.user.update()` invocation in/Users/vaidas/Documents/crypto-shop-backend/src/user/user.service.ts:28:38  25 }  26   27 async update(id: number, updateUserDto: Prisma.UserUpdateInput) {→ 28   return this.databaseService.user.update({         where: {           id: 1         },         data: {           items: [             {               title: "sfdsfg",               description: "nauddsfsdfotos",               price: 10,               currency: "BTC",               images: {                 url: "www.abc.com"               }             }           ]           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~         }       })Argument `items`: Invalid value provided. Expected ItemUpdateManyWithoutSellerNestedInput or ItemUncheckedUpdateManyWithoutSellerNestedInput, provided (Object).
3/5/24, 8:02 AM	UserController	Req User findAll()	::ffff:127.0.0.1
3/5/24, 8:02 AM	AllExceptionsFilter	[object Object]
3/5/24, 8:02 AM	ItemController	Req User findAll()	::ffff:127.0.0.1
3/5/24, 8:03 AM	ItemController	Req User findAll()	::ffff:127.0.0.1
3/5/24, 9:20 AM	UserController	Req User findAll()	::ffff:127.0.0.1
3/5/24, 9:20 AM	AllExceptionsFilter	[object Object]
3/5/24, 9:26 AM	AllExceptionsFilter	[object Object]
3/5/24, 9:26 AM	AllExceptionsFilter	[object Object]
3/5/24, 9:27 AM	AllExceptionsFilter	[object Object]
3/5/24, 9:29 AM	AllExceptionsFilter	[object Object]
3/5/24, 9:46 AM	AllExceptionsFilter	[object Object]
3/5/24, 9:47 AM	AllExceptionsFilter	[object Object]
3/5/24, 9:48 AM	AllExceptionsFilter	[object Object]
3/5/24, 9:49 AM	AllExceptionsFilter	[object Object]
3/5/24, 9:51 AM	AllExceptionsFilter	[object Object]
3/5/24, 9:51 AM	UserController	Req User findAll()	::ffff:127.0.0.1
3/5/24, 9:51 AM	AllExceptionsFilter	[object Object]
3/5/24, 9:51 AM	AllExceptionsFilter	[object Object]
3/5/24, 10:08 AM	ItemController	Req User findAll()	::ffff:127.0.0.1
3/5/24, 10:08 AM	AllExceptionsFilter	[object Object]
3/5/24, 10:09 AM	ItemController	Req User findAll()	::ffff:127.0.0.1
3/5/24, 10:09 AM	AllExceptionsFilter	[object Object]
3/5/24, 10:09 AM	AllExceptionsFilter	[object Object]
3/5/24, 10:10 AM	AllExceptionsFilter	[object Object]
3/5/24, 10:10 AM	AllExceptionsFilter	[object Object]
3/5/24, 10:11 AM	AllExceptionsFilter	[object Object]
3/5/24, 10:12 AM	AllExceptionsFilter	[object Object]
3/5/24, 10:12 AM	AllExceptionsFilter	[object Object]
3/5/24, 10:12 AM	AllExceptionsFilter	[object Object]
3/5/24, 10:12 AM	AllExceptionsFilter	[object Object]
3/5/24, 10:13 AM	UserController	Req User findAll()	::ffff:127.0.0.1
3/5/24, 10:13 AM	AllExceptionsFilter	[object Object]
3/5/24, 10:54 AM	AllExceptionsFilter	[object Object]
3/5/24, 10:54 AM	AllExceptionsFilter	[object Object]
3/5/24, 10:54 AM	AllExceptionsFilter	[object Object]
3/5/24, 10:55 AM	AllExceptionsFilter	Internal Server Error
3/5/24, 10:57 AM	UserController	Req User findAll()	::ffff:127.0.0.1
3/5/24, 10:57 AM	ItemController	Req User findAll()	::ffff:127.0.0.1
3/5/24, 11:05 AM	AllExceptionsFilter	[object Object]
3/5/24, 11:21 AM	AllExceptionsFilter	[object Object]
3/5/24, 11:21 AM	AllExceptionsFilter	[object Object]
3/5/24, 11:22 AM	AllExceptionsFilter	[object Object]
3/5/24, 11:22 AM	AllExceptionsFilter	Invalid `this.databaseService.user.create()` invocation in/Users/vaidas/Documents/crypto-shop-backend/src/user/user.service.ts:10:38   7 constructor(private readonly databaseService: DatabaseService) {}   8    9 async create(createUserDto: Prisma.UserCreateInput) {→ 10   return this.databaseService.user.create({         data: {           walletAddress: "bbbb876234sdf",       +   walletNames: JsonNullValueInput | Json         }       })Argument `walletNames` is missing.
3/5/24, 11:24 AM	AllExceptionsFilter	Internal Server Error
3/5/24, 11:25 AM	UserController	Req User findAll()	::ffff:127.0.0.1
3/5/24, 11:25 AM	ItemController	Req User findAll()	::ffff:127.0.0.1
3/5/24, 11:35 AM	AllExceptionsFilter	[object Object]
3/5/24, 11:37 AM	AllExceptionsFilter	Invalid `this.databaseService.user.findUnique()` invocation in/Users/vaidas/Documents/crypto-shop-backend/src/user/user.service.ts:26:38  23 }  24   25 async findUserByWalletAddress(walletAddress: string) {→ 26   return this.databaseService.user.findUnique({         where: {           walletAddress: undefined,       ?   id?: String,       ?   email?: String,       ?   AND?: UserWhereInput | UserWhereInput[],       ?   OR?: UserWhereInput[],       ?   NOT?: UserWhereInput | UserWhereInput[],       ?   walletNames?: JsonFilter,       ?   createdAt?: DateTimeFilter | DateTime,       ?   updatedAt?: DateTimeFilter | DateTime,       ?   items?: ItemListRelationFilter,       ?   buyerTransactions?: TransactionListRelationFilter,       ?   sellerTransactions?: TransactionListRelationFilter,       ?   messagesSent?: MessageListRelationFilter,       ?   messagesReceived?: MessageListRelationFilter         }       })Argument `where` of type UserWhereUniqueInput needs at least one of `id`, `walletAddress` or `email` arguments. Available options are marked with ?.
3/5/24, 11:38 AM	AllExceptionsFilter	Invalid `this.databaseService.user.findUnique()` invocation in/Users/vaidas/Documents/crypto-shop-backend/src/user/user.service.ts:26:38  23 }  24   25 async findUserByWalletAddress(walletAddress: string) {→ 26   return this.databaseService.user.findUnique({         where: {           walletAddress: undefined,       ?   id?: String,       ?   email?: String,       ?   AND?: UserWhereInput | UserWhereInput[],       ?   OR?: UserWhereInput[],       ?   NOT?: UserWhereInput | UserWhereInput[],       ?   walletNames?: JsonFilter,       ?   createdAt?: DateTimeFilter | DateTime,       ?   updatedAt?: DateTimeFilter | DateTime,       ?   items?: ItemListRelationFilter,       ?   buyerTransactions?: TransactionListRelationFilter,       ?   sellerTransactions?: TransactionListRelationFilter,       ?   messagesSent?: MessageListRelationFilter,       ?   messagesReceived?: MessageListRelationFilter         }       })Argument `where` of type UserWhereUniqueInput needs at least one of `id`, `walletAddress` or `email` arguments. Available options are marked with ?.
3/5/24, 11:41 AM	AllExceptionsFilter	[object Object]
3/5/24, 11:41 AM	AllExceptionsFilter	[object Object]
3/5/24, 11:41 AM	AllExceptionsFilter	[object Object]
3/5/24, 11:41 AM	AllExceptionsFilter	[object Object]
3/5/24, 11:42 AM	AllExceptionsFilter	[object Object]
3/5/24, 11:42 AM	AllExceptionsFilter	[object Object]
3/5/24, 11:42 AM	UserController	Req User findAll()	::ffff:127.0.0.1
3/5/24, 12:41 PM	UserController	Req User findAll()	::ffff:127.0.0.1
3/5/24, 12:41 PM	UserController	Req User findAll()	::ffff:127.0.0.1
3/5/24, 12:41 PM	ItemController	Req User findAll()	::ffff:127.0.0.1
3/7/24, 9:24 AM	AllExceptionsFilter	[object Object]
3/7/24, 9:24 AM	AllExceptionsFilter	[object Object]
3/7/24, 9:25 AM	AllExceptionsFilter	Invalid `this.databaseService.item.create()` invocation in/Users/vaidas/Documents/crypto-shop-backend/src/users/user.service.ts:17:38  14 }  15   16 async createItem(createItemDto: CreateItemDto, userId: string) {→ 17   return this.databaseService.item.create({         data: {           sellerId: "f18945ad-0f4f-4b6b-9497-32183baf4d88",       +   title: String         }       })Argument `title` is missing.
3/7/24, 9:31 AM	AllExceptionsFilter	Invalid `this.databaseService.item.create()` invocation in/Users/vaidas/Documents/crypto-shop-backend/src/users/user.service.ts:17:38  14 }  15   16 async createItem(createItemDto: CreateItemDto, userId: string) {→ 17   return this.databaseService.item.create({         data: {           sellerId: "f18945ad-0f4f-4b6b-9497-32183baf4d88",       +   title: String         }       })Argument `title` is missing.
3/7/24, 9:32 AM	AllExceptionsFilter	[object Object]
3/7/24, 9:33 AM	AllExceptionsFilter	Invalid `this.databaseService.item.create()` invocation in/Users/vaidas/Documents/crypto-shop-backend/src/users/user.service.ts:17:38  14 }  15   16 async createItem(createItemDto: CreateItemDto, userId: string) {→ 17   return this.databaseService.item.create({         data: {           sellerId: "f18945ad-0f4f-4b6b-9497-32183baf4d88",       +   title: String         }       })Argument `title` is missing.
3/7/24, 9:36 AM	AllExceptionsFilter	Invalid `this.databaseService.item.create()` invocation in/Users/vaidas/Documents/crypto-shop-backend/src/users/user.service.ts:17:38  14 }  15   16 async createItem(createItemDto: CreateItemDto, userId: string) {→ 17   return this.databaseService.item.create({         data: {           0: "i",           1: "t",           2: "e",           3: "m",           sellerId: "f18945ad-0f4f-4b6b-9497-32183baf4d88",       +   title: String         }       })Argument `title` is missing.
3/7/24, 9:38 AM	AllExceptionsFilter	Invalid `this.databaseService.item.create()` invocation in/Users/vaidas/Documents/crypto-shop-backend/src/users/user.service.ts:17:38  14 }  15   16 async createItem(createItemDto: CreateItemDto, userId: string) {→ 17   return this.databaseService.item.create({         data: {           sellerId: "f18945ad-0f4f-4b6b-9497-32183baf4d88",       +   title: String         }       })Argument `title` is missing.
3/7/24, 9:44 AM	AllExceptionsFilter	Invalid `this.databaseService.item.create()` invocation in/Users/vaidas/Documents/crypto-shop-backend/src/users/user.service.ts:17:38  14 }  15   16 async createItem(createItemDto: CreateItemDto, userId: string) {→ 17   return this.databaseService.item.create({         data: {           title: "sword",           description: "WoW: WotLK collector item",           price: 0.0005,           currency: "BTC",           sellerId: "f18945ad-0f4f-4b6b-9497-32183baf4d88",       +   images: JsonNullValueInput | Json         }       })Argument `images` is missing.
3/7/24, 10:16 AM	ItemController	Req User findAll()	::ffff:127.0.0.1
3/21/24, 8:40 PM	ItemController	Req User findAll()	::1
3/21/24, 8:42 PM	ItemController	Req User findAll()	::1
3/21/24, 8:43 PM	ItemController	Req User findAll()	::1
3/21/24, 8:52 PM	ItemController	Req User findAll()	::1
3/21/24, 8:52 PM	ItemController	Req User findAll()	::1
3/21/24, 8:53 PM	ItemController	Req User findAll()	::1
3/21/24, 8:53 PM	ItemController	Req User findAll()	::1
3/21/24, 8:54 PM	ItemController	Req User findAll()	::1
3/21/24, 8:54 PM	ItemController	Req User findAll()	::1
3/21/24, 8:55 PM	ItemController	Req User findAll()	::1
3/21/24, 9:02 PM	ItemController	Req User findAll()	::1
3/21/24, 9:03 PM	ItemController	Req User findAll()	::1
3/21/24, 9:04 PM	ItemController	Req User findAll()	::1
3/21/24, 9:04 PM	ItemController	Req User findAll()	::1
3/21/24, 9:04 PM	ItemController	Req User findAll()	::1
3/21/24, 9:04 PM	ItemController	Req User findAll()	::1
3/21/24, 9:05 PM	ItemController	Req User findAll()	::1
3/21/24, 9:05 PM	ItemController	Req User findAll()	::1
3/22/24, 7:31 AM	ItemController	Req User findAll()	::1
3/22/24, 7:33 AM	ItemController	Req User findAll()	::1
3/22/24, 7:35 AM	ItemController	Req User findAll()	::1
3/22/24, 7:46 AM	ItemController	Req User findAll()	::1
3/22/24, 7:50 AM	ItemController	Req User findAll()	::1
3/22/24, 8:19 AM	ItemController	Req User findAll()	::1
3/22/24, 8:20 AM	ItemController	Req User findAll()	::1
3/22/24, 8:21 AM	ItemController	Req User findAll()	::1
3/22/24, 8:21 AM	ItemController	Req User findAll()	::1
3/22/24, 8:24 AM	ItemController	Req User findAll()	::1
3/22/24, 8:25 AM	ItemController	Req User findAll()	::1
3/22/24, 8:26 AM	ItemController	Req User findAll()	::1
3/22/24, 8:26 AM	ItemController	Req User findAll()	::1
3/22/24, 8:27 AM	ItemController	Req User findAll()	::1
3/22/24, 8:28 AM	ItemController	Req User findAll()	::1
3/22/24, 8:29 AM	ItemController	Req User findAll()	::1
3/22/24, 8:29 AM	ItemController	Req User findAll()	::1
3/22/24, 9:06 AM	ItemController	Req User findAll()	::1
3/22/24, 9:11 AM	ItemController	Req User findAll()	::1
3/22/24, 9:11 AM	ItemController	Req User findAll()	::1
3/22/24, 9:12 AM	AllExceptionsFilter	Internal Server Error
3/22/24, 9:12 AM	ItemController	Req User findAll()	::1
3/22/24, 9:12 AM	ItemController	Req User findAll()	::1
3/22/24, 9:13 AM	ItemController	Req User findAll()	::1
3/22/24, 9:14 AM	ItemController	Req User findAll()	::1
3/22/24, 9:14 AM	ItemController	Req User findAll()	::1
3/22/24, 9:15 AM	ItemController	Req User findAll()	::1
3/22/24, 9:15 AM	ItemController	Req User findAll()	::1
3/22/24, 9:16 AM	ItemController	Req User findAll()	::1
3/22/24, 9:19 AM	ItemController	Req User findAll()	::1
3/22/24, 9:20 AM	ItemController	Req User findAll()	::1
3/22/24, 9:21 AM	ItemController	Req User findAll()	::1
3/22/24, 9:21 AM	ItemController	Req User findAll()	::1
3/22/24, 9:21 AM	ItemController	Req User findAll()	::1
3/22/24, 9:21 AM	ItemController	Req User findAll()	::1
3/22/24, 9:23 AM	ItemController	Req User findAll()	::1
3/22/24, 9:34 AM	ItemController	Req User findAll()	::1
3/22/24, 9:35 AM	ItemController	Req User findAll()	::1
3/22/24, 9:35 AM	ItemController	Req User findAll()	::1
3/22/24, 9:37 AM	ItemController	Req User findAll()	::1
3/22/24, 9:38 AM	ItemController	Req User findAll()	::1
3/22/24, 9:38 AM	ItemController	Req User findAll()	::1
3/22/24, 9:39 AM	ItemController	Req User findAll()	::1
3/22/24, 9:39 AM	ItemController	Req User findAll()	::1
3/22/24, 9:40 AM	ItemController	Req User findAll()	::1
3/22/24, 9:41 AM	ItemController	Req User findAll()	::1
3/22/24, 9:41 AM	ItemController	Req User findAll()	::1
3/22/24, 9:41 AM	ItemController	Req User findAll()	::1
3/22/24, 9:41 AM	ItemController	Req User findAll()	::1
3/22/24, 9:43 AM	ItemController	Req User findAll()	::1
3/22/24, 9:44 AM	ItemController	Req User findAll()	::1
3/22/24, 9:44 AM	ItemController	Req User findAll()	::1
3/22/24, 9:46 AM	ItemController	Req User findAll()	::1
3/22/24, 9:48 AM	ItemController	Req User findAll()	::1
3/22/24, 9:48 AM	ItemController	Req User findAll()	::1
3/22/24, 9:49 AM	ItemController	Req User findAll()	::1
3/22/24, 9:49 AM	ItemController	Req User findAll()	::1
3/22/24, 9:49 AM	ItemController	Req User findAll()	::1
3/22/24, 9:51 AM	ItemController	Req User findAll()	::1
3/22/24, 9:52 AM	ItemController	Req User findAll()	::1
3/22/24, 9:53 AM	ItemController	Req User findAll()	::1
3/22/24, 10:01 AM	ItemController	Req User findAll()	::1
3/22/24, 10:01 AM	ItemController	Req User findAll()	::1
3/22/24, 10:01 AM	ItemController	Req User findAll()	::1
3/22/24, 10:01 AM	ItemController	Req User findAll()	::1
3/22/24, 10:01 AM	ItemController	Req User findAll()	::1
3/22/24, 10:02 AM	ItemController	Req User findAll()	::1
3/22/24, 10:03 AM	ItemController	Req User findAll()	::1
3/22/24, 10:03 AM	ItemController	Req User findAll()	::1
3/22/24, 10:15 AM	ItemController	Req User findAll()	::1
3/22/24, 10:16 AM	ItemController	Req User findAll()	::1
3/22/24, 10:19 AM	ItemController	Req User findAll()	::1
3/22/24, 10:20 AM	ItemController	Req User findAll()	::1
3/22/24, 10:20 AM	ItemController	Req User findAll()	::1
3/22/24, 10:20 AM	ItemController	Req User findAll()	::1
3/22/24, 10:21 AM	ItemController	Req User findAll()	::1
3/22/24, 10:21 AM	ItemController	Req User findAll()	::1
3/22/24, 10:35 AM	ItemController	Req User findAll()	::1
3/22/24, 10:36 AM	ItemController	Req User findAll()	::1
3/22/24, 10:36 AM	ItemController	Req User findAll()	::1
3/22/24, 10:37 AM	ItemController	Req User findAll()	::1
3/22/24, 10:38 AM	ItemController	Req User findAll()	::1
3/22/24, 10:38 AM	ItemController	Req User findAll()	::1
3/22/24, 10:44 AM	ItemController	Req User findAll()	::1
3/22/24, 10:47 AM	ItemController	Req User findAll()	::1
3/22/24, 10:50 AM	ItemController	Req User findAll()	::1
3/22/24, 10:51 AM	ItemController	Req User findAll()	::1
3/22/24, 10:54 AM	ItemController	Req User findAll()	::1
3/22/24, 11:03 AM	ItemController	Req User findAll()	::1
3/22/24, 11:06 AM	ItemController	Req User findAll()	::1
3/22/24, 11:07 AM	ItemController	Req User findAll()	::1
3/22/24, 11:07 AM	ItemController	Req User findAll()	::1
3/22/24, 12:08 PM	ItemController	Req User findAll()	::1
3/22/24, 12:14 PM	ItemController	Req User findAll()	::1
3/22/24, 12:14 PM	ItemController	Req User findAll()	::1
3/22/24, 12:15 PM	ItemController	Req User findAll()	::1
3/22/24, 12:16 PM	ItemController	Req User findAll()	::1
3/22/24, 12:17 PM	ItemController	Req User findAll()	::1
3/22/24, 12:17 PM	ItemController	Req User findAll()	::1
3/22/24, 12:18 PM	ItemController	Req User findAll()	::1
3/22/24, 12:18 PM	ItemController	Req User findAll()	::1
3/22/24, 12:21 PM	ItemController	Req User findAll()	::1
3/22/24, 12:22 PM	ItemController	Req User findAll()	::1
3/22/24, 12:23 PM	ItemController	Req User findAll()	::1
3/22/24, 12:24 PM	ItemController	Req User findAll()	::1
3/22/24, 12:24 PM	ItemController	Req User findAll()	::1
3/22/24, 12:24 PM	ItemController	Req User findAll()	::1
3/22/24, 12:25 PM	ItemController	Req User findAll()	::1
3/22/24, 12:25 PM	ItemController	Req User findAll()	::1
3/22/24, 12:26 PM	ItemController	Req User findAll()	::1
3/22/24, 12:26 PM	ItemController	Req User findAll()	::1
3/22/24, 12:26 PM	ItemController	Req User findAll()	::1
3/22/24, 12:27 PM	ItemController	Req User findAll()	::1
3/22/24, 12:30 PM	ItemController	Req User findAll()	::1
3/22/24, 12:30 PM	ItemController	Req User findAll()	::1
3/22/24, 12:32 PM	ItemController	Req User findAll()	::1
3/22/24, 12:33 PM	ItemController	Req User findAll()	::1
3/22/24, 12:34 PM	ItemController	Req User findAll()	::1
3/23/24, 11:11 AM	ItemController	Req User findAll()	::1
3/23/24, 11:12 AM	ItemController	Req User findAll()	::1
3/23/24, 11:29 AM	ItemController	Req User findAll()	::1
3/23/24, 11:29 AM	ItemController	Req User findAll()	::1
3/23/24, 11:36 AM	ItemController	Req User findAll()	::1
3/23/24, 11:38 AM	ItemController	Req User findAll()	::1
3/23/24, 11:39 AM	ItemController	Req User findAll()	::1
3/23/24, 11:42 AM	ItemController	Req User findAll()	::1
3/23/24, 11:55 AM	ItemController	Req User findAll()	::1
3/23/24, 11:57 AM	ItemController	Req User findAll()	::1
3/23/24, 11:57 AM	ItemController	Req User findAll()	::1
3/23/24, 11:57 AM	ItemController	Req User findAll()	::1
3/23/24, 11:58 AM	ItemController	Req User findAll()	::1
3/23/24, 11:58 AM	ItemController	Req User findAll()	::1
3/23/24, 11:58 AM	ItemController	Req User findAll()	::1
3/23/24, 11:58 AM	ItemController	Req User findAll()	::1
3/23/24, 11:58 AM	ItemController	Req User findAll()	::1
3/23/24, 12:04 PM	ItemController	Req User findAll()	::1
3/23/24, 12:04 PM	ItemController	Req User findAll()	::1
3/23/24, 12:22 PM	ItemController	Req User findAll()	::1
3/23/24, 12:27 PM	ItemController	Req User findAll()	::1
3/23/24, 12:27 PM	ItemController	Req User findAll()	::1
3/23/24, 12:27 PM	ItemController	Req User findAll()	::1
3/23/24, 12:28 PM	ItemController	Req User findAll()	::1
3/23/24, 12:28 PM	ItemController	Req User findAll()	::1
3/23/24, 12:28 PM	ItemController	Req User findAll()	::1
3/23/24, 12:28 PM	ItemController	Req User findAll()	::1
3/23/24, 12:28 PM	ItemController	Req User findAll()	::1
3/23/24, 12:28 PM	ItemController	Req User findAll()	::1
3/23/24, 12:28 PM	ItemController	Req User findAll()	::1
3/23/24, 12:28 PM	ItemController	Req User findAll()	::1
3/23/24, 12:28 PM	ItemController	Req User findAll()	::1
3/23/24, 12:28 PM	ItemController	Req User findAll()	::1
3/23/24, 12:28 PM	ItemController	Req User findAll()	::1
3/23/24, 12:28 PM	ItemController	Req User findAll()	::1
3/23/24, 12:28 PM	ItemController	Req User findAll()	::1
3/23/24, 12:28 PM	ItemController	Req User findAll()	::1
3/23/24, 12:28 PM	AllExceptionsFilter	ThrottlerException: Too Many Requests
3/23/24, 12:28 PM	ItemController	Req User findAll()	::1
3/23/24, 12:28 PM	ItemController	Req User findAll()	::1
3/23/24, 12:36 PM	ItemController	Req User findAll()	::1
3/23/24, 12:37 PM	ItemController	Req User findAll()	::1
3/23/24, 12:39 PM	ItemController	Req User findAll()	::1
3/23/24, 12:39 PM	ItemController	Req User findAll()	::1
3/23/24, 12:39 PM	ItemController	Req User findAll()	::1
3/23/24, 12:39 PM	ItemController	Req User findAll()	::1
3/23/24, 12:39 PM	ItemController	Req User findAll()	::1
3/23/24, 12:39 PM	ItemController	Req User findAll()	::1
3/23/24, 12:39 PM	ItemController	Req User findAll()	::1
3/23/24, 12:41 PM	ItemController	Req User findAll()	::1
3/23/24, 12:41 PM	ItemController	Req User findAll()	::1
3/23/24, 12:41 PM	ItemController	Req User findAll()	::1
3/23/24, 12:41 PM	ItemController	Req User findAll()	::1
3/23/24, 12:41 PM	ItemController	Req User findAll()	::1
3/23/24, 12:41 PM	ItemController	Req User findAll()	::1
3/23/24, 12:41 PM	ItemController	Req User findAll()	::1
3/23/24, 12:41 PM	ItemController	Req User findAll()	::1
3/23/24, 12:41 PM	ItemController	Req User findAll()	::1
3/23/24, 12:41 PM	ItemController	Req User findAll()	::1
3/23/24, 12:41 PM	ItemController	Req User findAll()	::1
3/25/24, 11:26 AM	AllExceptionsFilter	Internal Server Error
3/25/24, 11:28 AM	AllExceptionsFilter	[object Object]
3/25/24, 11:29 AM	AllExceptionsFilter	[object Object]
3/25/24, 11:29 AM	AllExceptionsFilter	[object Object]
3/25/24, 11:32 AM	AllExceptionsFilter	[object Object]
3/25/24, 11:33 AM	AllExceptionsFilter	[object Object]
3/25/24, 11:34 AM	AllExceptionsFilter	[object Object]
3/25/24, 12:15 PM	AllExceptionsFilter	[object Object]
3/25/24, 12:15 PM	AllExceptionsFilter	Internal Server Error
3/25/24, 12:52 PM	AllExceptionsFilter	[object Object]
3/25/24, 12:52 PM	AllExceptionsFilter	[object Object]
3/25/24, 12:52 PM	AllExceptionsFilter	[object Object]
3/25/24, 12:52 PM	AllExceptionsFilter	[object Object]
3/25/24, 12:57 PM	AllExceptionsFilter	Internal Server Error
3/25/24, 1:26 PM	AllExceptionsFilter	[object Object]
3/25/24, 1:26 PM	AllExceptionsFilter	[object Object]
3/25/24, 1:28 PM	AllExceptionsFilter	Internal Server Error
3/25/24, 1:28 PM	AllExceptionsFilter	[object Object]
3/25/24, 1:30 PM	AllExceptionsFilter	[object Object]
3/25/24, 1:30 PM	AllExceptionsFilter	[object Object]
3/25/24, 1:34 PM	AllExceptionsFilter	Internal Server Error
3/25/24, 1:34 PM	AllExceptionsFilter	Internal Server Error
3/25/24, 1:35 PM	AllExceptionsFilter	Internal Server Error
3/25/24, 1:44 PM	AllExceptionsFilter	Internal Server Error
3/25/24, 1:50 PM	AllExceptionsFilter	Internal Server Error
